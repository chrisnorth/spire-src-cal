##Update fluxConv product
from herschel.share.fltdyn.time import FineTime

df        = java.text.SimpleDateFormat("yyyy.MM.dd/HH:mm:ss/z")
#directory = "..//..//..//..//..//..//data//spire//cal//SCal"
#dataDir = "//disks//winchester2//calibration_data//"
#LOCAL VERSION
directory = Configuration.getProperty('var.hcss.workdir')
dataDir = Configuration.getProperty('var.hcss.workdir')

inputCalDirTree=True
fluxConvVersionIn="9"
outputCalDirTree=True
if not inputCalDirTree:
    #read calibration tree from pool
    cal=spireCal(pool='spire_cal_12_3')

fluxConvVersionOut="10EP"

if inputCalDirTree:
    fluxConv = fitsReader("%s//Phot//SCalPhotFluxConv//SCalPhotFluxConv_nominal_20090819_v%s.fits"%(directory, fluxConvVersionIn))
else:
    fluxConv=cal.getPhot().getProduct('FluxConvList').refs[0]

#startDates['nominal'] = [df.parse("2005.02.22/00:00:00/GMT"), df.parse("2009.05.19/10:59:00/GMT"), df.parse("2009.08.19/14:43:16/GMT")]
#startDates['bright'] = [df.parse("2005.02.22/00:00:00/GMT"), df.parse("2009.09.06/13:35:35/GMT")]

biasMode=fluxConv.meta["biasMode"].value
startDate=fluxConv.meta["startDate"].value.toDate()
df2 = java.text.SimpleDateFormat("yyyyMMdd")

# Read in the K4 parameters generated by the colorCorrK script.
colorCorrKversion = "v4EP"
file = open("%s/colourCorrectionK4Parameters.txt"%(dataDir),"r")
lines = file.readlines()
print lines
colorCorrKread = (lines[0].split()[3])
print colorCorrKversion, colorCorrKread
if colorCorrKversion == colorCorrKread:
   k4E = {"PSW":float(lines[2].split()[1]),\
       "PMW":float(lines[2].split()[2]),\
       "PLW":float(lines[2].split()[3])}
   k4P = {"PSW":float(lines[3].split()[1]),\
       "PMW":float(lines[3].split()[2]),\
       "PLW":float(lines[3].split()[3])}
else:
   raise Exception("\n\nCould not read in K4 parameters... version mismatch!!!\n")

file.close()

for array in ["PSW", "PMW", "PLW"]:
    fluxConv[array].meta["k4E_%s"%array] = DoubleParameter(k4E[array], "%s colour correction for standard nu*F_nu=const. reference SED of an extended source."%array)
    fluxConv[array].meta["k4P_%s"%array] = DoubleParameter(k4P[array], "%s colour correction for standard nu*F_nu=const. reference SED of a point source."%array)
    # And also add to main metadata
    fluxConv.meta["k4E_%s"%array] = DoubleParameter(k4E[array], "%s colour correction for standard nu*F_nu=const. reference SED of an extended source."%array)
    fluxConv.meta["k4P_%s"%array] = DoubleParameter(k4P[array], "%s colour correction for standard nu*F_nu=const. reference SED of a point source."%array)

print "Extended K4 parameters = %s"%k4E
print "Point source K4 parameters = %s"%k4P

filename = java.io.File(r"%s//Phot//SCalPhotFluxConv//SCalPhotFluxConv_%s_%s_v%s.fits"%(directory, biasMode, df2.format(startDate),fluxConvVersionOut))

print "writing to FITS...."
fitsWriter.save(filename.toString(), fluxConv)
print
print "written: %s"%filename.toString()